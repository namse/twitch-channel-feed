service: server

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
#  stage: dev
  region: ap-northeast-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "*"
# you can define service wide environment variables here
  environment:
    TWITCH_EXTENSION_SECRET_KEY: "${env:TWITCH_EXTENSION_SECRET_KEY}"

functions:
  feed:
    handler: src/feed.post
    events:
      - http:
          path: feed
          method: post
          cors: ${self:custom.cors}
  emote:
    handler: src/emote.post
    events:
      - http:
          path: emote
          method: post
          cors: ${self:custom.cors}
  getPresignedUrl:
    handler: src/media/preSignedUrl.get
    events:
      - http:
          path: media/preSignedUrl
          method: get
          cors: ${self:custom.cors}
  encode:
    handler: src/media/encode.post
    timeout: 10
    events:
      - http:
          path: media/{mediaId}/encode
          method: post
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                mediaId: true

plugins:
  - serverless-domain-manager
  - serverless-plugin-typescript

custom:
  cors:
    origins:
      - "*"
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Access-Control-Allow-Headers
      - Access-Control-Allow-Origin
      - Access-Control-Allow-Methods
  customDomain:
    domainName: api.twitchchannelfeed.com
    stage: ${env:STAGE}
    basePath: ${env:STAGE}
    certificateName: '*.twitchchannelfeed.com'
